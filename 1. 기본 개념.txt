1. js의 7가지 데이터타입
[원시타입: 변경 불가능한 값 이며 pass by value(=값에 의한 전달)방식으로 전달된다.]
- number
- string
- boolean
- null
- undefined
- symbol
[객체 타입: 데이터와 해당 데이터에 관련한 동작을 모두 포함할 수 있는 개념적 존재이며 pass by reference(=참조에의한 전달) 방식으로 전달된다.]
- object


2. 동적 타이핑
: 변수에 할당된 타입에 의해 동적으로 변수의 타입이 결정되는 것


3. 자바스크립트는 객체(object) 기반의 스크립트 언어이며 자바스크립트를 이루고 있는 거의 “모든 것”이 객체이다.
	-> 원시 타입을 제외한  나머지 값들(함수, 배열, 정규식 등)은모두 객체이다.


4. 메소드
: 프로퍼티(객체가 가지고 있는 data? [string은 length프로퍼티를 가지고 있다.]) value가 함수일 경우 일반 함수와 구분하기위해 메소드라한다.


5. 객체
: 데이터를 의미하는 프로퍼티(property)와 데이터를 참조하고 조작할 수 있는 동작(behavior)을 의미하는 메소드(method)로 구성된 집합


6. 원시 타입의 불변성 (비효율적으로 보이지만 누구도 참조하지 않는 데이터는 js엔진이 가비지 콜렉션을 수행한다.)
var maple = "test";
maple = "not change";

위와 같은 코드의 경우 maple은 test값을 가리키고 있으며 다음줄에서 test가 not change로 값이 변경되는 것이 아닌 새로운 not change를 생성해 maple이 으것을 가리키도록 한다.

한번 생성된 문자열은 read only로서 변경이 불가하다.
var maple = "abcd";
maple[0] = "A";
위 구문으로는 string을 변경시킬 수 없다.


7. undefind 를 개발자가 할당하는 경우는 권장하지않으며 본래의 취지와 어긋난다. 값이 없음을 나타낼때에는 null을 할당한다.


8. null인지를 확인할 때에는 value === null로 확인해야 한다.
	-> typeof null 의 경우 object가 나온다.


9. symbol
: 충돌 위험이 없는 유일한 객체의 프로퍼티 키를 만들기위해 사용한다.
var maple = Symbol('key');
var obj = {};
obj[maple] = value;
console.log(obj[maple]);	// value

- for loop로 객체를 돌았을때 symbol로 추가된 프로퍼티는 나오지 않는다.
- 유니크한 프로퍼티로서 이름충돌 걱정 없이 새속성 추가가 가능하다
(내가 사용할지 모르겟다...)


10. 호이스팅
: var 선언문이나 function 선언문 등 모든 선언문이 해당 Scope의 선두로 옮겨진 것처럼 동작하는 특성을 말한다.
  -> 선언 전에 참조가 가능하다.

선언 단계와초기화단계가 한번에이루어진다. (스코프에 변수가등록 -> 메모리 공간확보 -> undefined로 초기화 순서)
so, 선언전에 참조하여도 오류가아닌 undefined반환

let, const의 경우 호이스팅이 되지 않는 것은 아니지만 코드 실행이 변수가 실제 있는 위치에 도달하기 전까지는 액세스가 불가능하다.
